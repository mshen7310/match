export = match;
declare function match(x: any, ptn: any, ...acc: any[]): any;
declare namespace match {
    export function primitive(x: any): boolean;
    export { is_primitive };
    export function array(x: any): boolean;
    export { is_array };
    export function _function(x: any): boolean;
    export { _function as function };
    export { is_function };
    export function object(x: any): boolean;
    export { is_object };
    export function regexp(x: any): boolean;
    export { is_regexp };
    export function number(x: any): boolean;
    export { is_number };
    export function boolean(x: any): boolean;
    export { is_boolean };
    export function undefined(x: any): boolean;
    export { is_undefined };
    export function _null(x: any): boolean;
    export { _null as null };
    export { is_null };
    export function string(x: any): boolean;
    export { is_string };
    export function _instanceof(...Classes: any[]): (x: any) => any;
    export { _instanceof as instanceof };
    export { is_instanceof };
    export function empty(x: any): boolean;
    export { is_empty };
    export function and(...patterns: any[]): (x: any, ...acc: any[]) => any;
    export { and as all };
    export function or(...patterns: any[]): (x: any, ...acc: any[]) => any;
    export { or as any };
    export function not(...patterns: any[]): (x: any, ...acc: any[]) => boolean;
    export { not as none };
    export { no };
    export { yes };
    export { optional };
    export { funobj };
    export { contain };
    export { subarray };
}
declare function is_primitive(x: any): boolean;
declare function is_array(x: any): boolean;
declare function is_function(x: any): boolean;
declare function is_object(x: any): boolean;
declare function is_regexp(x: any): boolean;
declare function is_number(x: any): boolean;
declare function is_boolean(x: any): boolean;
declare function is_undefined(x: any): boolean;
declare function is_null(x: any): boolean;
declare function is_string(x: any): boolean;
declare function is_instanceof(...Classes: any[]): (x: any) => any;
declare function is_empty(x: any): boolean;
declare function and_1(...patterns: any[]): (x: any, ...acc: any[]) => any;
declare function or_1(...patterns: any[]): (x: any, ...acc: any[]) => any;
declare function not_1(...patterns: any[]): (x: any, ...acc: any[]) => boolean;
declare function no(): boolean;
declare function yes(): boolean;
declare function optional(pattern: any): (x: any, ...acc: any[]) => any;
declare function funobj(obj: any): (x: any, ...acc: any[]) => boolean;
declare function contain(pattern: any): (x: any, ...acc: any[]) => boolean;
declare function subarray(pattern: any): (x: any, ...acc: any[]) => boolean;
